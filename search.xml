<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>详细拆解第一个CPP的HelloWorld项目</title>
      <link href="/2024/02/19/%E8%AF%A6%E7%BB%86%E6%8B%86%E8%A7%A3%E7%AC%AC%E4%B8%80%E4%B8%AACPP%E7%9A%84HelloWorld%E9%A1%B9%E7%9B%AE/"/>
      <url>/2024/02/19/%E8%AF%A6%E7%BB%86%E6%8B%86%E8%A7%A3%E7%AC%AC%E4%B8%80%E4%B8%AACPP%E7%9A%84HelloWorld%E9%A1%B9%E7%9B%AE/</url>
      
        <content type="html"><![CDATA[<h2 id="详细拆解第一个-CPP的-“Hello-World”-项目"><a href="#详细拆解第一个-CPP的-“Hello-World”-项目" class="headerlink" title="详细拆解第一个 CPP的 “Hello World” 项目"></a>详细拆解第一个 CPP的 “Hello World” 项目</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Hello World&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​第一行中,  <code>#include &lt;iostream&gt;</code>是 C++ 的预编译语句, 对于初学者来说, 什么事预编译并不重要, 但需要理解这行语句的含义, <code>#include</code>其实就是字面意思, 表示 “包含” “引用” <code>iostream</code>是 C++ 一个头文件的名称, 头文件可以理解为一个仓库, 我们所用的许多语句都在这个仓库中, 像这样的仓库还有很多, 这里最基础的库就是上面的<code>iostream</code>. 合起来, 整行语句就是 <code>包含一个名叫iostream的头文件</code></p><p>​接下来, <code>using namespace std;</code>的意思是, 使用 std 命名空间, 命名空间, 可以理解为是仓库中的房间, 仓库中有很多名称一样但用处不一样的东西, 为了区分它们, C++ 运用命名空间这样的一个房间, 将名字相同但用处不同的东西放到不同的房间里去. 当我们需要调用这些东西时, 我们就要告诉电脑, 你要去哪哪哪个仓库, 哪哪哪个房间去找我想要用的东西, 比如上述案例中的前两行语句, 就是告诉电脑, 去名叫<code>iostream</code> 的仓库, 找名叫<code>std</code>的房间, 去调用接下来我要用到的东西. 比如 <code>cout</code> 和 <code>endl</code> 就都是<code>std</code>命名空间里的东西. 其实, <code>using namespace std;</code> 这一行语句也可以不加, 但在项目后面需要用到这个命名空间时, 就会有点繁琐, 比如上述的 “Hello World” 程序, 去掉 <code>using namespace std;</code> 这句语句后是这样的:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;Hello World&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里的 <code>cout</code> 和 <code>endl</code> 因为是在 <code>std</code> 里的东西, 所以调用时必须加上 <code>std::</code> 来表示这是在命名空间std里的东西, 当项目内容变多时, <code>std::</code> 就一直需要打出来, 十分繁琐, 所以我们在项目钱加上 <code>using namespace std;</code> 这样一句语句, 就可以避免一直打出 <code>std::</code> 了.</p><p>​继续后面的内容, <code>int main()</code> 这一句其实和后面的一部分是一个整体, 这个整体是这样的:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这是main函数, 是整个 C++ 程序的开始点, 一切语句都是从main下面的开始执行的, <code>int</code> 表示整数, 在这里表示这个函数的 <em><strong>返回值</strong></em> 是一个整数, <em><strong>返回值</strong></em> 就是这后面的 <code>return 0;</code> , 这里的 0 是一个整数, 所以要用 <code>int</code> 开头. main后面有一对小括号, 这是函数的参数所放的地方. 我们可以把函数想象成一个工厂, 参数就是工厂的原料, 返回值就是工厂把原料加工后的产品. 函数会处理参数, 并返回结果, 这个结果就是返回值了. main函数的返回值0表示什么都不返回, 因此初学者并不需要要搞清楚main函数的返回值到底是什么意思. 上面的两个大括号表示, 大括号里面的语句是main这个函数的管辖范围, 也就是这个函数的内容.</p><p>​接下来, <code>cout</code> 是 C++ 的输出语句, <code>&quot;Hello World&quot;</code> 是一串字符, C++ 的字符要用引号引起来. <code>endl</code> 表示换行. <code>cout &lt;&lt; &quot;Hello World&quot;</code> 这一个部分就是把字符串”Hello World”输出, <code>&lt;&lt;</code> 这个符号其实很形象, 就是把 <code>endl</code> 塞到 <code>Hello World</code> 里面, 在把这一个整体塞到 <code>cout</code> 里面. 对于初学者来说, <code>&lt;&lt;</code> 可以理解为 合并, 把<code>&lt;&lt;</code>左边的和右边的连接在一起. </p><p>​对于每一行语句, 在句末都要加上<code>;</code>表示一个语句的结束, 这对初学者来说容易遗漏.</p>]]></content>
      
      
      <categories>
          
          <category> 计算机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C/CPP </tag>
            
            <tag> 编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>谈谈我与编程</title>
      <link href="/2024/02/19/%E8%B0%88%E8%B0%88%E6%88%91%E4%B8%8E%E7%BC%96%E7%A8%8B/"/>
      <url>/2024/02/19/%E8%B0%88%E8%B0%88%E6%88%91%E4%B8%8E%E7%BC%96%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="谈谈我与编程"><a href="#谈谈我与编程" class="headerlink" title="谈谈我与编程"></a>谈谈我与编程</h1><hr><blockquote><p> 我一直想写点东西来谈谈我对编程的想法. 我的编程水平不高, 一个蓝桥入门级别的双周赛只对了第一道签到题.</p></blockquote><h2 id="从VBS到C"><a href="#从VBS到C" class="headerlink" title="从VBS到C++"></a>从<code>VBS</code>到<code>C++</code></h2><p><code>Shellof </code>是我发小, 很小的时候和他谈<strong>理想,</strong> 我说 设计师, 他说<code>hacker</code>.</p><p>大概是上初一, 暑假里的一天, <code>Shellof</code>到我家向我展示他学到东西. 我很无聊地盯着他, 看他操作, 他在我电脑上新建了一个后缀为<code>.vbs</code>的文件, 在里面写了一行:</p><figure class="highlight vbscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">msgbox</span>(<span class="string">&quot;Hello, World!&quot;</span>)</span><br></pre></td></tr></table></figure><p>然后保存运行, 电脑上竟然弹出了一个窗口, 上面显示着<code>Hello, World!</code>.我当时感觉, <strong>诶呦, 有两下子.</strong></p><p>我马上起了兴趣. 接着, 他又来了个升级版: </p><figure class="highlight vbscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">do</span></span><br><span class="line">    <span class="built_in">msgbox</span>(<span class="string">&quot;你被坑了, 关不掉了吧&quot;</span>)</span><br><span class="line"><span class="keyword">loop</span></span><br></pre></td></tr></table></figure><p>保存运行, 这个窗口还真的关不掉. 他说, 关掉它有两个方法, 第一个, 重启电脑, 第二个, 打开任务管理器, 把这个窗口的进程结束. </p><p>哇塞, **有意思. **他还来: </p><figure class="highlight vbscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="built_in">inputbox</span>(<span class="string">&quot;请输入: &quot;</span>)</span><br><span class="line"><span class="built_in">msgbox</span>(a)</span><br></pre></td></tr></table></figure><p>这之后我就开始喜欢上这东西了, 所以我的第一门语言应该是 <del>Scratch</del> VBS</p><p>后面我自己研究VBS啊, 研究出计算器啊, 坑人的东西啊. 后来<code>Shellof</code>给我推荐了<code>Python</code>. 借给我一本<code>Python</code>的书, 那是是初二, 我开启一学期的<code>Python</code>学习.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Python</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Hello, World&quot;</span>)</span><br></pre></td></tr></table></figure><p>我拿着那本书, 再到网上找教程,视频啊文档啊, 就这样子学<code>Python</code>. 和很多初学者一样, 学到<strong>列表</strong>不会喽.</p><p>不过我还是硬着头皮看, 最后也都是能学会的.</p><p>初二下学期, 新冠又搞得只能在家上网课, 说来惭愧, 此后一上网课, 就是我编程技术突飞猛进的时候. 初二下学期的网课时期, 我学习了<code>PyGame</code>, 并写出人生中第一款游戏, 仿照当时很火的文字游戏, 写了个低配版的. 后来更新了好多版本. 但由于一直无法理解<strong>类</strong>的概念, 我当时的代码很烂, shi 山一层一层往上叠. 之后就越来越觉得无趣了. 这便动了换语言的念头.</p><p>当时也是屯了很多教程网站, 我就在菜鸟教程里面翻各种语言, 当时比较迷茫, 不知道要干什么, 后来我选择了<code>C++</code>.然后就找教程啊, 看不懂, 放弃了. 哈哈哈不过当时我想着, 不然先学<code>C</code>,作为一个铺垫, 再学<code>C++</code>应该就会轻松一点. 好的然后就找教程啊, 看不懂, 放弃了. 哈哈哈这回更迷茫了, 我就放眼<strong>前端,</strong> 学习<code>HTML</code>.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- HTML --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Hello, World!<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><p>我当时只会<code>HTML</code>, 什么<code>CSS</code>和<code>JavaScript</code>, 只是听说过一遍, 根本不会用, 也不知道他们的重要性. 你想想, 光用<code>HTML</code>能写出啥? 一点样式都没有, 当时还不会相对路径, 网页网页间跳转用绝对路径, 发给别人就打不开了哈哈哈. 所以也是很快就弃坑了哈. 这个时候, 我竟然自不量力地去搞网络后端, 学<code>PHP</code>, 原因就是看到了网上那句话:</p><blockquote><p>PHP是世界上最好的语言</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;?</span><br><span class="line">    echo(&quot;Hello, World!&quot;);</span><br><span class="line">PHP?&gt;</span><br></pre></td></tr></table></figure><p>当时<code>PHP</code>教程里说, 学<code>PHP</code>要有<code>C</code>语言的基础, 我<code>C</code>语言还没明白呢, 这让我动摇了学<code>PHP</code>的决心. 后来学着学着才知道, 写<code>PHP</code>最好要有一个<strong>服务器,</strong> 好的, 弃坑了. 弃坑就去学<code>C</code>语言, 学<code>C</code>语言的主要目的是为学<code>C++</code>打底子.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// C</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>* argv[])</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Hello, World!&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当时被<code>C</code>语言的<strong>花括号</strong>吸引了, 我也不知道为什么会喜欢花括号. 后来<code>C</code>语言学到结构体左右吧, 准备向<code>C++</code>进军.</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// C++</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Hello, World!&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我对<code>C++</code>的热情一直不小, 在学习<code>C++</code>的过程中, 我终于搞清楚了<strong>类</strong>的概念. 之后就一直想用<code>C++</code>做游戏开发. <code>Shellof</code>向我推荐了<code>EasyX</code>库, 我嫌一堆<code>API</code>难受, 不想学, 在网上到处<code>C++</code>图形库游戏库.</p><p>有一次找到<code>Qt</code>去了, 下载, 安装, 不会用, 卸了.</p><p>又有一次甚至误入<code>WindowsAPI</code>, 给我搞劝退了. 看来网上说得对, 用游戏引擎开发事半功倍.</p><p>好的那我就去学游戏引擎, 就学当时最主流的<code>Unity</code>引擎.</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Unity + C#</span></span><br><span class="line">Debug.Log(<span class="string">&quot;Hello, World!&quot;</span>);</span><br></pre></td></tr></table></figure><p>学<code>Unity</code>当然用<code>C#</code>啦, 我就先学了<code>C#</code>.</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// C#</span></span><br><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Application</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">&quot;Hello, World!&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当时把<code>C#</code>学到了和<code>C++</code>差不多的水平, 感觉足够了, 下载<code>Unity</code>, 安装, 不会用, 看教程, 不会, 弃坑了.</p><p>当时很无奈, 不过想想<code>C#</code>倒是入门了, 也就算了. 现在老老实实学<code>C++</code>吧.</p><p>好的, 我虽然没有接受<code>EasyX</code>, 但是我接受了<code>Easy2D</code>. 不错的游戏引擎, 用它写了点小游戏. 后来想想用一些<code>EasyX</code>也可以啊, 就又去玩<code>EasyX</code>. 这两个库都挺好. 我记得我用<code>EasyX</code>库做了一个绘制像素画的简单程序, 现在想想还挺好的一个项目, 只是已经很久没有再维护了, 我现在要是打开项目看, 那一定会说: 啊? <strong>我自己看不懂我自己写的代码了.</strong> 不行, 这个项目我哪天一定得再捡起来. </p><p>我又没得学了, 有时候打开编辑器, 快速地敲了一个输出<code>Hello, World!</code>, 然后看着自己的<code>Hello, World!</code> 发呆. 这个时候也离新冠解封不远了. 回到学校意味着不能再碰电脑了. 这之后很长一段时间, <code>C++</code>一直处于停滞状态.</p><p>初三上学期, 那个时候是冬天, 网上小道消息说, 最近人贩子很多, 我在网上越看越害怕, 不敢摸黑上下学了. 然后每天就拉着<code>Shellof</code>上下学. 路上我俩可以聊很多. 然后就有了一个念头, <strong>组建团队, 开发一个小游戏, 在初三毕业的时候放出来.</strong> 第二年 (2023) 2 月份左右, 我们定好了团队名称: <code>Lit Studio</code>. 然后搞策划, 决定使用<code>C#</code> + <code>Unity</code>开发游戏. 好的, 我们那段时间一直在不停地积累理论知识. 4 月份左右, 我招来了两个人当<strong>美术组.</strong> 这样四个人的团队已经建成了, 就等中考结束到毕业典礼之间 6 天时间制作一款纪念初中的游戏. 我们也花费了很长一段时间来想做一款什么样的游戏. 最后, 我脑中逐渐有了雏形, 这种画面是很难用语言描绘的, 但是我想, 应该可以用计算机语言描绘. 我们还制定了好几套计划, 以备突发情况…… <strong>你无法想象我们做了多充足的准备.</strong></p><p>那天下午, 中考结束了. 我一回到家就开电脑, 打开事先安装好的<code>Unity</code>引擎, 搞了快 4 个小时, <strong>连一个封面都做不出来,</strong> 这一切还建立在电脑散热嗡嗡响的基础上. 我受不了了, 马上在团队群里发消息: “A 计划无法继续进行, 火速启用 B 计划 <code>@Shellof</code>明天来我这一趟. “</p><p>所谓 A B 计划, A 计划是用<code>Unity</code> + <code>C#</code>进行开发. 我考虑到之前<code>Unity</code>把我劝退过, 所以提出了 B 计划, 即: 在 A 计划无法正常进行的情况下, 使用<code>Easy2D</code> + <code>C++</code>快速搭建游戏. 当然还有 C 计划, C 计划是, 在 A B 计划都无法实施的情况下, 使用<code>Easy2D</code> + <code>C++</code>只搭建一个游戏封面, 然后在展示的时候说: 游戏剧透就不好玩了, 等你们回去自己试. 这样就延长了几天的开发时间.</p><p>我启动了 B 计划, 开始火速搭建. <code>Shellof</code>也表示<code>Unity</code>在他的电脑上也跑不动. 那天晚上, 我就完成了封面的搭建和内容的简单布置. 但是, <code>Shellof</code>并不会<code>C++</code>, 这是个头疼的问题, 也就是说, 接下来只能是我单打独斗了. 那是我做的最大的项目, 6 天时间我敲了 2024 行代码. 而<code>Shellof</code>完成了团队网页的搭建. 我也是把它带到了毕业典礼上, 这个项目叫 <strong><a href="https://ligkit.github.io/index.html">Lidarkght</a></strong>.</p><p>初中毕业后的那个暑假, 我想试试<code>Qt</code>, 然后下载, 安装, 用得很晕, 然后又卸了. 再然后我就在B站上发了视频, 因此认识了一些网友. 这之后我才知道我有多菜. 这些认识的网友<strong>一个个都比我厉害太多了……</strong> 在这种压力下, 我决定深挖我现在学到的技术. 认识他们之前, 我不会用<code>git</code>, 不会<code>STL</code>, 模板也不会, 现代<code>C++</code>也不会. 认识他们之后, 这些我都去学了, 且不说学得有多深, 至少是极大地拓宽了视野. </p><p>暑假里, 我又想搞游戏开发, 在网上找好用的游戏引擎, 结果遇到了<code>Godot</code>这款神级的引擎, 拉着<code>Shellof</code>一块学了学, 有个入门的水平了.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># gdscript</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Hello, World!&quot;</span>)</span><br></pre></td></tr></table></figure><p><code>Godot</code>一般使用<code>GdScript</code>, 这个语言的语法与<code>Python</code>很像, 学起来毫不费力. <code>Godot</code>也是我认为最好的一款游戏引擎. </p><p>很快就开学了, 到了高中, 我又有了一个大计划: <strong>同初中毕业一样, 我要开发一款游戏, 来在高中毕业的时候放出来, 从现在开始, 打磨三年</strong>. 现在正在使用<code>Easy2D</code> + <code>C++</code>进行开发.</p><p>现代<code>C++</code>是个很有意思的东西, 我感觉从<code>C++11</code>开始, <code>C++</code>的新标准越来越抽象, 也越来越厉害. 最让我感兴趣的是<code>auto</code>类型, <code>Lambda</code>表达式和模块. 对于自推导类型的<code>auto</code>类型, 网上有一段很迷惑的代码: </p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">auto</span> <span class="title">auto</span><span class="params">(<span class="keyword">auto</span> <span class="keyword">auto</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">auto</span> <span class="keyword">auto</span> = <span class="keyword">auto</span> + <span class="keyword">auto</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">auto</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这显然是在整活, <code>auto</code>作为关键字肯定不能作为函数名和变量名. 我也是当做一个乐子. 且不说犯了关键字, 这段代码和一下一段是等价的: </p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">auto</span> <span class="title">f</span><span class="params">(<span class="keyword">auto</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">auto</span> n = x + x;</span><br><span class="line">    <span class="keyword">return</span> n;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这还是新标准. 这和以下又是等价的: </p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</span></span><br><span class="line"><span class="function">T <span class="title">f</span><span class="params">(T x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    T n = x + x;</span><br><span class="line">    <span class="keyword">return</span> n;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这就是函数模板, <code>STL</code>为解决问题提供了大量模板和函数. 这是<code>C++</code>成为最强大的语言的原因之一.</p><p><code>C++</code>是<strong>难而强大</strong>的语言. 我对<code>C++</code>的了解只是冰山一角, 然而就此已经感受到了<code>C++</code>难度之大. </p><p>同时我发疯地去看<strong>汇编语言</strong>教程, 那真的是伤脑筋的东西, 到现在也记不住一个<code>HelloWorld</code>程序, 恍惚地记得:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">; Assembly</span><br><span class="line">MOV AH, 9</span><br><span class="line">INT 21</span><br></pre></td></tr></table></figure><p>这是用来输出的. 像什么<code>AX</code> <code>BX</code>一大堆寄存器, <code>ADD</code> <code>SUB</code> 一大堆运算符, 很难学. 我学了一下午, 弃坑了.</p><h2 id="Shellof与Include"><a href="#Shellof与Include" class="headerlink" title="Shellof与Include"></a><code>Shellof</code>与<code>Include</code></h2><p>**我一直不知道如何去感谢<code>Shellof</code>, 他可以说是我的启蒙老师的地位. **</p><p>前面说过, <code>Shellof</code>是我发小. 我们之间一直都是, 一个人发现了一件有意思的事, 然后两个人一起玩, 但结果一般都是我后来居上. 就比如说编程, <code>Shellof</code>比我先学, 我后学. 大概在我用<code>PyGame</code>写低配版文字游戏的时候, 我的能力就已经开始和他齐平了. 在意见方面, 我感觉他有点像我的跟班. 之前的很多事都是让我做主. 有一次我和他准备坐地铁出去玩, 他之前就说过想坐地铁去苏州. 那天我就找他啦, 我说, “不然明天坐地铁去玩吧, 去苏州? “ 他说好好好. 我又问, “或者是反过来去上海? “ 他说, <strong>“你决定. “</strong> 我当时就感觉哈, 之前很多事都是我决定的, <strong>“这回你来. “</strong> 最后让他决定, 去了苏州.</p><p>他在后来选择了<strong>前端与网络安全</strong>这方面, 或者是他之前说过的<code>hacker</code>. 我则相反, 我不爱和网络打交道的开发. 所以想做<strong>独立游戏开发.</strong> 前不久, 23 年底, 我和<code>Shellof</code>聊高中选科的事. 他说不想像计算机方向发展了. 我吓一大跳. 后来我了解到, 原因是他进入了 我抛弃<code>Python</code>想换语言学的 那个时期, 比较迷茫. 那个样子大概就像我之前说的, 盯着自己敲的<code>HelloWorld</code>发呆. 我告诉他这情况我经历过. 嗨~ 我那一小段时间里, 换了好几个方向, 不过最后选择了<code>C++</code>. 换个语言没问题, 当时他搞前端, 用<code>Java</code>. 我说 “不然试试<code>C/C++</code>? “ <code>Shellof</code>说<code>C++</code>太难了. 我知道<code>C#</code>这个语言是介于<code>Java</code>和<code>C/C++</code>之间的一门语言. 然后就告诉他, “不然你先看看<code>C#</code>做个过渡? “ 但<code>Shellof</code>一直不看好<code>C#</code>这个语言, 他说, “<code>C#</code>几乎是在抄袭<code>Java</code>, 虽然后来<code>Java</code>和<code>C#</code>开始互抄. “ 后来他打算开始学<code>C/C++</code>. </p><p><code>C++</code>难. 话是这么说, 可<code>C++</code>到底难在哪里呢? 我的经验告诉我, 只要有一点其他语言的底子, 入门<code>C++</code>不是件难事. <code>C++</code>难在后面的<strong>指针, 模板, 数据结构</strong> (鬼数据结构我现在还不会呢). 新标准中的<strong>智能指针</strong>让指针的使用变得简单了些. <code>STL</code>看着复杂, 多用用就知道了它有多强大.</p><h2 id="敲代码的人电脑坏了有多痛苦"><a href="#敲代码的人电脑坏了有多痛苦" class="headerlink" title="敲代码的人电脑坏了有多痛苦"></a>敲代码的人电脑坏了有多痛苦</h2><p>还是发生在初二寒假那段新冠封锁在家的时候, 我那个时候在<code>Shellof</code>那里了解到<code>Linux</code>系统. 当时的我是<code>Windows</code>系统刚刚会用一点点. 听到有这样一个神奇的系统还是蛮惊讶的. 这个时候<code>Shellof</code>告诉我, <code>Windows</code>系统有三种方法使用<code>Linux</code>. 一种是<code>Windows</code>系统里有个<code>WSL</code>, 叫做<code>Windows</code>的<code>Linux</code>子系统. 另一种是装一个虚拟机. 最后是装一个双系统. 我先是试了<code>WSL</code>, 但是电脑总告诉我哪哪哪有问题, 无法正常使用. 后来我就装了个<code>Ubuntu</code>的虚拟机. 跑起来有点卡, 不过我的愿望算是满足了.</p><p>我这台笔记本, 原装的是<code>Windows10</code>. 我在新冠被封的一开始就把它升到<code>WIndows11</code>了. 人家<code>Windows11</code>毕竟是新系统, <code>Bug</code>还是比较多的. 更大的原因是我装的是<code>Windows11</code>的家庭版. 相当于是最差的了. 所以就会出现什么情况呢? 我上着网课好好地, 咔! 电脑蓝屏了. 或者是电脑屏蔽突然花了. 这些情况让我对<code>Windows11</code>又爱又恨. 爱当然爱在它那<code>GUI</code>啦. 人家说<code>Windows11</code>用着不习惯. 为啥我没有不习惯呢? 因为我就从来没有去习惯过之前的系统.</p><p>这就是问题的根源. 我要一个<strong>更稳定的</strong>系统. 所以我可以运用之前的经验, 装<code>WIndows10</code>和<code>Windows11</code>双系统. 上课时用<code>WIndows10</code>, 平时用<code>Windows11</code>. 这是个美好的愿望. 然后我就跟着网上的教程去装. 最后重启电脑, 然后电脑就再也没有启动了, 一直是 开机, 开一半, 自己关了, 又自己开了, 又关了. 这样一直循环.我当时直接傻了. <strong>我的天, 我电脑坏了? 我的代码!</strong> 当时在写低配版的文字游戏, 那一个项目有一千多行<del>shi山</del>代码啊. </p><p>然后心情就非常不好. 不过我通过一些方法, 把电脑里的重要数据都<code>copy</code>出来了. 但是不能敲码了啊. 那个时候, 小区还在封着, 出去修电脑是不可能的. 至于上网课, 就暂时用一台十几年前的联想<code>Windows7</code>凑合着. 所以我从那是起就开始对装双系统产生了一种<strong>极大的恐惧</strong>. 不过后面<code>Shellof</code>装过<code>Windows</code>和<code>ArchLinux</code>的双系统, 并没有出乱子.</p><p>最后, 等到 4 月份左右, 小区解封了, 我就马上抱着电脑去修. 最后重新装了<code>Windows10</code>系统. 回到家我还是心痒, 没几天又升到<code>Windows11</code>了. 不过这次我比较幸运. 本来装的<code>Windows10</code>是专业版, 升到<code>Windows11</code>还是专业版, 那这专业版可比家庭版稳定多了. 所以到现在我一直用着稳定的<code>Windows11</code>. 出于对微软的认知: <code>Windows</code>系统隔代香. 所以我会在<code>Windows12</code>一发布就**立刻升级. **</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>当我发现自己竟然和计算机有了共情, 我就觉得我已经找到自己的路了. 现在回想一下, 自己之前竟然干了这么多, 还是蛮充实的. </p>]]></content>
      
      
      <categories>
          
          <category> 计算机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第一篇文章</title>
      <link href="/2024/02/18/%E7%AC%AC%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0/"/>
      <url>/2024/02/18/%E7%AC%AC%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0/</url>
      
        <content type="html"><![CDATA[<p>这是 Include 的第一篇文章.</p>]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 第一篇文章 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
